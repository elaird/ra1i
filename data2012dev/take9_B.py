from configuration.units import fb
from data import data
import utils


def common1(x) :
    x._lumi =  	{
        "mumu"               :   4.402 ,
        "muon"               :   4.402 ,
        "mcPhot"             :   4.402 ,
        "mcHad"              :   4.412 ,
        "mcTtw"              :   4.412 ,
        "had"                :   4.412 ,
        "mcMuon"             :   4.402 ,
        "mcZinv"             :   4.412 ,
        "mcMumu"             :   4.402 ,
        "phot"               :   4.402 ,
	}

    x._triggerEfficiencies = {
        #"hadBulk":       (0.666, 0.745, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000),
        "hadBulk":       (1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000),
        "muon":          (0.880, 0.880, 0.880, 0.880, 0.880, 0.880, 0.880, 0.880, 0.880, 0.880, 0.880),
        "phot":          (1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000),
        "mumu":          (0.949, 0.952, 0.950, 0.956, 0.953, 0.954, 0.958, 0.959, 0.962, 0.974, 0.953),
        
                }
    x._htBinLowerEdges = ( 200.0, 275.0, 325.0, 375.0, 475.0, 575.0, 675.0, 775.0, 875.0, 975.0, 1075.0)
    x._htMaxForPlot    = 1175.0
    x._htMeans         = ( 235.2, 297.5, 347.5, 416.4, 517.3, 618.4, 716.9, 819.9, 919.0, 1019.0, 1289.0)
    

    iPhot = 3
    x._observations["nPhot"] = tuple([None]*iPhot + list(x._observations["nPhot"][iPhot:]))


def common(x) :
    common1(x)

    systBins = tuple([0]*2 + [1]*3 + [2]*1 + [3]*2 + [4]*3)
#    systBins = tuple([0,1,2,3,3,4,4,5,5,6,6])
    name = x.__class__.__name__


    if "le3j" in name :
        systMagnitudes = (0.05, 0.05, 0.10, 0.20, 0.30)  # tmp
#        systMagnitudes = (0.05, 0.05, 0.05, 0.10, 0.10, 0.20, 0.30)  # tmp
        x._triggerEfficiencies["had"] = (0.816, 0.901, 0.988, 0.994, 1.000, .994, 1.000, 1.000, 1.000, 1.000, 1.000)
        x._observations["nHadBulk"] = (3.4067318E09, 8.317453E08, 3.29919975E08, 2.74138825E08, 8.507427E07,   
                                       2.8887025E07, 1.09110E07, 4.6215E06, 2.07715E06, 1.031125E06, 1.20755E06)

    elif "ge4j" in name :
        systMagnitudes = (0.05, 0.10, 0.10, 0.20, 0.30)  # dtmp
        #systMagnitudes = (0.05, 0.05, 0.05, 0.10, 0.10, 0.20, 0.30)  # tmp
        x._triggerEfficiencies["had"] = (0.665, 0.666, 0.971, 0.988, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000, 1.000)
        x._observations["nHadBulk"] = (6.60088E07, 1.400533E08, 5.2689525E07, 4.8204025E07, 3.35079E07,
                                       1.582655E07, 7.279475E06, 3.46345E06, 1.732725E06, 8.9562E05, 1.142775E06)

    if "ge4b" in name :
        x._mergeBins = (0, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3)
        systMagnitudes = (0.25,)
        systBins = (0, 0, 0, 0)
    else :
        x._mergeBins = None

    x._systBins = {
        "sigmaPhotZ": systBins,
        "sigmaMuonW": systBins,
        "sigmaMumuZ": systBins,
        }

    x._fixedParameters = {
        "sigmaPhotZ": systMagnitudes,
        "sigmaMuonW": systMagnitudes,
        "sigmaMumuZ": systMagnitudes,
        "k_qcd_nom":2.96e-2,
        "k_qcd_unc_inp":utils.quadSum([0.61e-2, 0.463e-2])
        #"k_qcd_unc_inp":utils.quadSum([2.5*0.61e-2, 2.5*0.463e-2])
        }
class data_0b_ge4j(data) :
    def _fill(self) :
        self._mcExpectationsBeforeTrigger =  	{
		"mcPhot"             :   ( 0.0, 0.0, 0.0, 103.8, 76.99, 41.88, 18.97, 9.546, 4.181, 1.952, 2.427, ) ,
		"mcTtw"              :   ( 67.13, 361.0, 129.4, 101.5, 62.95, 27.98, 10.82, 5.572, 2.189, 1.127, 1.589, ) ,
		"mcHad"              :   ( 96.59, 516.1, 192.0, 152.5, 100.7, 47.47, 19.75, 9.575, 4.113, 2.075, 2.569, ) ,
		"mcMuon"             :   ( 209.8, 708.7, 331.3, 356.4, 270.6, 151.3, 80.65, 43.73, 23.29, 13.61, 18.68, ) ,
		"mcZinv"             :   ( 29.47, 155.1, 62.63, 51.02, 37.79, 19.49, 8.931, 4.003, 1.924, 0.9482, 0.9801, ) ,
		"mcMumu"             :   ( 15.01, 51.82, 24.7, 24.4, 21.34, 12.69, 7.221, 3.944, 2.183, 1.376, 2.085, ) ,
	}

        self._mcStatError =  	{
		"mcMuonErr"          :   ( 6.026, 8.502, 4.165, 4.115, 2.549, 1.859, 1.369, 1.013, 0.7308, 0.5592, 0.6589, ) ,
		"mcMumuErr"          :   ( 1.129, 1.557, 1.015, 0.4474, 0.3464, 0.2793, 0.1947, 0.1462, 0.1064, 0.08259, 0.1057, ) ,
		"mcZinvErr"          :   ( 0.8727, 1.794, 1.08, 0.7141, 0.4499, 0.3137, 0.207, 0.1385, 0.09651, 0.06742, 0.06871, ) ,
		"mcHadErr"           :   ( 3.129, 4.737, 2.352, 1.846, 1.34, 0.8705, 0.5405, 0.394, 0.2422, 0.1725, 0.2135, ) ,
		"mcTtwErr"           :   ( 3.005, 4.384, 2.09, 1.702, 1.262, 0.8121, 0.4993, 0.3689, 0.2221, 0.1587, 0.2021, ) ,
		"mcPhotErr"          :   ( 0.0, 0.0, 0.0, 2.524, 2.019, 1.469, 0.9799, 0.6955, 0.4693, 0.3188, 0.3592, ) ,
	}

        self._observations =  	{
		"nPhot"              :   ( 0.0, 0.0, 0.0, 110.0, 73.0, 34.0, 12.0, 5.0, 2.0, 1.0, 2.0, ) ,
		"nHad"               :   ( 56.0, 370.0, 165.0, 135.0, 100.0, 55.0, 15.0, 4.0, 4.0, 5.0, 4.0, ) ,
		"nMuon"              :   ( 158.0, 523.0, 256.0, 240.0, 185.0, 90.0, 50.0, 26.0, 13.0, 8.0, 12.0, ) ,
		"nMumu"              :   ( 10.0, 52.0, 21.0, 19.0, 22.0, 14.0, 7.0, 1.0, 0.0, 1.0, 0.0, ) ,
	}

        common(self)


class data_0b_le3j(data) :
    def _fill(self) :
        self._mcExpectationsBeforeTrigger =  	{
		"mcPhot"             :   ( 0.0, 0.0, 0.0, 971.0, 331.3, 118.8, 45.75, 16.99, 7.168, 4.112, 3.524, ) ,
		"mcTtw"              :   ( 3238.0, 1496.0, 636.7, 439.5, 122.5, 37.36, 12.3, 4.715, 2.304, 0.9718, 0.6011, ) ,
		"mcHad"              :   ( 5803.0, 2702.0, 1187.0, 861.2, 260.3, 86.06, 30.0, 12.06, 5.455, 2.365, 1.831, ) ,
		"mcMuon"             :   ( 1.261e+04, 4894.0, 2706.0, 2543.0, 1036.0, 441.7, 205.7, 103.4, 55.15, 30.73, 44.67, ) ,
		"mcZinv"             :   ( 2564.0, 1206.0, 550.2, 421.7, 137.8, 48.69, 17.7, 7.342, 3.151, 1.393, 1.229, ) ,
		"mcMumu"             :   ( 1287.0, 520.6, 293.7, 283.2, 123.7, 54.2, 26.57, 13.69, 7.219, 3.817, 6.43, ) ,
	}

        self._mcStatError =  	{
		"mcMuonErr"          :   ( 33.43, 17.22, 10.91, 9.293, 5.234, 3.424, 2.326, 1.655, 1.203, 0.9003, 1.08, ) ,
		"mcMumuErr"          :   ( 10.63, 3.159, 1.992, 1.605, 0.8258, 0.5413, 0.3734, 0.2684, 0.2053, 0.1447, 0.1845, ) ,
		"mcZinvErr"          :   ( 8.464, 4.898, 3.121, 1.978, 0.8503, 0.5017, 0.3006, 0.1934, 0.1272, 0.08482, 0.07996, ) ,
		"mcHadErr"           :   ( 17.33, 9.418, 5.822, 4.202, 2.017, 1.118, 0.6425, 0.3978, 0.2756, 0.182, 0.146, ) ,
		"mcTtwErr"           :   ( 15.12, 8.044, 4.915, 3.707, 1.829, 0.9988, 0.5678, 0.3476, 0.2445, 0.161, 0.1222, ) ,
		"mcPhotErr"          :   ( 0.0, 0.0, 0.0, 7.786, 4.263, 2.56, 1.578, 0.9559, 0.6263, 0.4706, 0.4456, ) ,
	}

        self._observations =  	{
		"nPhot"              :   ( 0.0, 0.0, 0.0, 915.0, 285.0, 103.0, 35.0, 12.0, 6.0, 2.0, 2.0, ) ,
		"nHad"               :   ( 4361.0, 2446.0, 1089.0, 754.0, 207.0, 59.0, 21.0, 7.0, 4.0, 6.0, 1.0, ) ,
		"nMuon"              :   ( 1.038e+04, 3775.0, 2023.0, 1825.0, 728.0, 305.0, 100.0, 66.0, 23.0, 22.0, 25.0, ) ,
		"nMumu"              :   ( 1165.0, 511.0, 275.0, 252.0, 91.0, 49.0, 23.0, 6.0, 8.0, 2.0, 1.0, ) ,
	}

        common(self)


class data_1b_ge4j(data) :
    def _fill(self) :
        self._mcExpectationsBeforeTrigger =  	{
		"mcPhot"             :   ( 0.0, 0.0, 0.0, 18.07, 13.25, 7.372, 3.723, 1.811, 0.8066, 0.417, 0.4039, ) ,
		"mcTtw"              :   ( 39.06, 244.8, 95.62, 73.96, 43.08, 17.46, 6.457, 2.563, 1.414, 0.6473, 0.5571, ) ,
		"mcHad"              :   ( 43.03, 268.3, 105.5, 82.25, 49.05, 20.59, 8.217, 3.367, 1.764, 0.8236, 0.7106, ) ,
		"mcMuon"             :   ( 177.7, 644.0, 330.0, 353.8, 255.3, 136.5, 66.24, 33.51, 17.45, 9.279, 11.94, ) ,
		"mcZinv"             :   ( 3.974, 23.46, 9.846, 8.29, 5.972, 3.137, 1.76, 0.8043, 0.3498, 0.1763, 0.1535, ) ,
		"mcMumu"             :   ( 3.602, 12.82, 5.857, 6.547, 6.113, 3.135, 1.965, 1.075, 0.5155, 0.3554, 0.5399, ) ,
	}

        self._mcStatError =  	{
		"mcMuonErr"          :   ( 2.172, 3.942, 2.872, 2.916, 2.453, 1.775, 1.224, 0.8544, 0.6089, 0.4342, 0.5126, ) ,
		"mcMumuErr"          :   ( 0.2725, 0.5269, 0.2681, 0.2705, 0.2698, 0.1656, 0.1476, 0.1141, 0.07234, 0.05273, 0.07038, ) ,
		"mcZinvErr"          :   ( 0.1692, 0.3788, 0.228, 0.1535, 0.09403, 0.06532, 0.04965, 0.03419, 0.02177, 0.01399, 0.01304, ) ,
		"mcHadErr"           :   ( 0.9907, 2.47, 1.524, 1.329, 0.997, 0.6253, 0.3753, 0.2244, 0.1814, 0.1073, 0.09577, ) ,
		"mcTtwErr"           :   ( 0.9762, 2.44, 1.507, 1.32, 0.9925, 0.6219, 0.372, 0.2218, 0.1801, 0.1064, 0.09487, ) ,
		"mcPhotErr"          :   ( 0.0, 0.0, 0.0, 0.5653, 0.4581, 0.3293, 0.2254, 0.1584, 0.1136, 0.07931, 0.07458, ) ,
	}

        self._observations =  	{
		"nPhot"              :   ( 0.0, 0.0, 0.0, 26.0, 11.0, 8.0, 5.0, 2.0, 0.0, 0.0, 0.0, ) ,
		"nHad"               :   ( 33.0, 198.0, 91.0, 73.0, 27.0, 12.0, 1.0, 5.0, 3.0, 1.0, 0.0, ) ,
		"nMuon"              :   ( 141.0, 524.0, 222.0, 219.0, 159.0, 83.0, 42.0, 22.0, 6.0, 6.0, 8.0, ) ,
		"nMumu"              :   ( 3.0, 15.0, 5.0, 11.0, 4.0, 2.0, 1.0, 2.0, 2.0, 0.0, 0.0, ) ,
	}

        common(self)


class data_1b_le3j(data) :
    def _fill(self) :
        self._mcExpectationsBeforeTrigger =  	{
		"mcPhot"             :   ( 0.0, 0.0, 0.0, 97.73, 33.11, 11.3, 5.218, 1.761, 0.7821, 0.4638, 0.3783, ) ,
		"mcTtw"              :   ( 605.3, 334.8, 147.4, 102.2, 22.99, 5.895, 2.065, 0.6292, 0.284, 0.1169, 0.08314, ) ,
		"mcHad"              :   ( 814.2, 447.3, 199.9, 142.8, 36.29, 10.4, 3.964, 1.404, 0.6214, 0.2554, 0.1819, ) ,
		"mcMuon"             :   ( 2906.0, 1220.0, 687.6, 620.5, 218.9, 86.35, 37.28, 16.59, 8.991, 5.038, 6.623, ) ,
		"mcZinv"             :   ( 208.9, 112.5, 52.46, 40.64, 13.3, 4.505, 1.899, 0.7746, 0.3374, 0.1386, 0.09874, ) ,
		"mcMumu"             :   ( 161.7, 69.24, 37.94, 35.64, 14.38, 5.778, 2.986, 1.374, 0.7065, 0.5208, 0.6435, ) ,
	}

        self._mcStatError =  	{
		"mcMuonErr"          :   ( 9.102, 5.929, 4.147, 3.786, 2.161, 1.326, 0.8474, 0.5413, 0.4079, 0.3021, 0.3132, ) ,
		"mcMumuErr"          :   ( 1.851, 0.8964, 0.6797, 0.5707, 0.3186, 0.1646, 0.1202, 0.08263, 0.05135, 0.07296, 0.03757, ) ,
		"mcZinvErr"          :   ( 1.304, 0.7966, 0.4935, 0.3055, 0.1382, 0.07506, 0.04799, 0.03113, 0.02094, 0.01197, 0.009876, ) ,
		"mcHadErr"           :   ( 4.215, 2.906, 1.89, 1.536, 0.6872, 0.3189, 0.1707, 0.08813, 0.06087, 0.02873, 0.02938, ) ,
		"mcTtwErr"           :   ( 4.009, 2.795, 1.824, 1.506, 0.6732, 0.3099, 0.1638, 0.08245, 0.05716, 0.02612, 0.02767, ) ,
		"mcPhotErr"          :   ( 0.0, 0.0, 0.0, 1.276, 0.6917, 0.3875, 0.2638, 0.154, 0.1165, 0.07548, 0.07637, ) ,
	}

        self._observations =  	{
		"nPhot"              :   ( 0.0, 0.0, 0.0, 142.0, 43.0, 18.0, 6.0, 1.0, 2.0, 0.0, 0.0, ) ,
		"nHad"               :   ( 699.0, 447.0, 176.0, 125.0, 33.0, 10.0, 4.0, 0.0, 0.0, 0.0, 0.0, ) ,
		"nMuon"              :   ( 2577.0, 1067.0, 545.0, 508.0, 168.0, 56.0, 21.0, 12.0, 3.0, 3.0, 3.0, ) ,
		"nMumu"              :   ( 173.0, 78.0, 42.0, 34.0, 14.0, 6.0, 3.0, 1.0, 0.0, 1.0, 0.0, ) ,
	}

        common(self)


class data_2b_ge4j(data) :
    def _fill(self) :
        self._mcExpectationsBeforeTrigger =  	{
		"mcPhot"             :   ( 0.0, 0.0, 0.0, 2.482, 1.704, 0.9919, 0.53, 0.2321, 0.06827, 0.07529, 0.0493, ) ,
		"mcTtw"              :   ( 15.64, 107.4, 42.81, 32.5, 20.31, 7.691, 2.745, 0.8667, 0.8413, 0.2628, 0.2381, ) ,
		"mcHad"              :   ( 16.12, 110.7, 44.23, 33.81, 21.16, 8.104, 2.998, 0.9773, 0.8904, 0.2877, 0.2505, ) ,
		"mcMuon"             :   ( 104.6, 393.0, 204.1, 214.8, 151.5, 80.59, 37.05, 18.02, 9.519, 4.506, 5.515, ) ,
		"mcZinv"             :   ( 0.473, 3.257, 1.416, 1.319, 0.8472, 0.4128, 0.2529, 0.1106, 0.04909, 0.0249, 0.01234, ) ,
		"mcMumu"             :   ( 1.268, 4.964, 2.164, 2.721, 2.4, 1.177, 0.5948, 0.2608, 0.1871, 0.1245, 0.106, ) ,
	}

        self._mcStatError =  	{
		"mcMuonErr"          :   ( 1.403, 2.718, 2.004, 2.049, 1.709, 1.224, 0.8187, 0.5482, 0.3935, 0.2644, 0.3029, ) ,
		"mcMumuErr"          :   ( 0.1428, 0.2919, 0.2047, 0.2173, 0.2031, 0.1342, 0.09282, 0.05398, 0.06315, 0.03755, 0.02962, ) ,
		"mcZinvErr"          :   ( 0.05162, 0.1341, 0.08322, 0.06441, 0.03362, 0.022, 0.01657, 0.01087, 0.008427, 0.005053, 0.002629, ) ,
		"mcHadErr"           :   ( 0.5137, 1.35, 0.8577, 0.7435, 0.5951, 0.3443, 0.2016, 0.1076, 0.1506, 0.05865, 0.0556, ) ,
		"mcTtwErr"           :   ( 0.5111, 1.343, 0.8537, 0.7407, 0.5941, 0.3436, 0.2009, 0.1071, 0.1504, 0.05843, 0.05553, ) ,
		"mcPhotErr"          :   ( 0.0, 0.0, 0.0, 0.2011, 0.1496, 0.1082, 0.08181, 0.04964, 0.01536, 0.02951, 0.0191, ) ,
	}

        self._observations =  	{
		"nPhot"              :   ( 0.0, 0.0, 0.0, 2.0, 5.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, ) ,
		"nHad"               :   ( 8.0, 95.0, 33.0, 34.0, 19.0, 12.0, 3.0, 0.0, 1.0, 0.0, 1.0, ) ,
		"nMuon"              :   ( 68.0, 322.0, 160.0, 158.0, 117.0, 55.0, 19.0, 10.0, 5.0, 0.0, 3.0, ) ,
		"nMumu"              :   ( 2.0, 4.0, 3.0, 1.0, 3.0, 0.0, 1.0, 0.0, 0.0, 0.0, 2.0, ) ,
	}

        common(self)


class data_2b_le3j(data) :
    def _fill(self) :
        self._mcExpectationsBeforeTrigger =  	{
		"mcPhot"             :   ( 0.0, 0.0, 0.0, 6.695, 2.555, 0.7261, 0.3372, 0.07751, 0.04929, 0.06143, 0.009455, ) ,
		"mcTtw"              :   ( 87.94, 73.23, 33.93, 24.65, 5.197, 1.223, 0.4759, 0.02158, 0.03364, 0.003272, 0.002367, ) ,
		"mcHad"              :   ( 106.5, 83.29, 38.53, 28.17, 6.262, 1.568, 0.602, 0.07626, 0.05802, 0.01014, 0.006536, ) ,
		"mcMuon"             :   ( 869.1, 406.3, 230.1, 205.7, 65.44, 23.78, 8.793, 3.338, 1.875, 0.9634, 1.071, ) ,
		"mcZinv"             :   ( 18.54, 10.06, 4.598, 3.525, 1.066, 0.3449, 0.126, 0.05468, 0.02438, 0.006868, 0.004169, ) ,
		"mcMumu"             :   ( 40.26, 16.67, 7.964, 6.618, 2.232, 0.818, 0.4124, 0.1791, 0.04534, 0.04583, 0.0342, ) ,
	}

        self._mcStatError =  	{
		"mcMuonErr"          :   ( 4.21, 2.899, 2.206, 2.089, 1.161, 0.6898, 0.4132, 0.2442, 0.1903, 0.1244, 0.1273, ) ,
		"mcMumuErr"          :   ( 0.9344, 0.5347, 0.38, 0.33, 0.1787, 0.1029, 0.07601, 0.04744, 0.01116, 0.01999, 0.005135, ) ,
		"mcZinvErr"          :   ( 0.416, 0.2454, 0.1532, 0.09906, 0.03985, 0.02112, 0.01165, 0.008356, 0.006339, 0.002241, 0.001575, ) ,
		"mcHadErr"           :   ( 1.26, 1.124, 0.7718, 0.6708, 0.3132, 0.1425, 0.08443, 0.009287, 0.02325, 0.002457, 0.001842, ) ,
		"mcTtwErr"           :   ( 1.189, 1.097, 0.7565, 0.6634, 0.3107, 0.1409, 0.08363, 0.004052, 0.02237, 0.001007, 0.0009555, ) ,
		"mcPhotErr"          :   ( 0.0, 0.0, 0.0, 0.3301, 0.1931, 0.09228, 0.06114, 0.02342, 0.02831, 0.03359, 0.002439, ) ,
	}

        self._observations =  	{
		"nPhot"              :   ( 0.0, 0.0, 0.0, 9.0, 2.0, 3.0, 0.0, 0.0, 1.0, 0.0, 0.0, ) ,
		"nHad"               :   ( 78.0, 99.0, 37.0, 25.0, 9.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, ) ,
		"nMuon"              :   ( 863.0, 356.0, 183.0, 144.0, 46.0, 14.0, 3.0, 2.0, 1.0, 0.0, 0.0, ) ,
		"nMumu"              :   ( 40.0, 9.0, 12.0, 8.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ) ,
	}

        common(self)


class data_3b_ge4j(data) :
    def _fill(self) :
        self._mcExpectationsBeforeTrigger =  	{
		"mcPhot"             :   ( 0.0, 0.0, 0.0, 0.1552, 0.0818, 0.06008, 0.02739, 0.0127, 0.002144, 0.01106, 0.001866, ) ,
		"mcTtw"              :   ( 1.254, 10.45, 4.394, 3.223, 2.255, 0.9833, 0.3352, 0.1075, 0.09996, 0.05365, 0.03946, ) ,
		"mcHad"              :   ( 1.269, 10.6, 4.464, 3.282, 2.304, 1.004, 0.3523, 0.1155, 0.1039, 0.05546, 0.04002, ) ,
		"mcMuon"             :   ( 10.09, 39.46, 20.2, 21.87, 16.16, 9.201, 4.37, 2.143, 1.42, 0.5013, 0.5957, ) ,
		"mcZinv"             :   ( 0.01479, 0.1553, 0.0701, 0.05906, 0.04924, 0.02109, 0.0171, 0.008035, 0.003955, 0.001808, 0.0005606, ) ,
		"mcMumu"             :   ( 0.1166, 0.2904, 0.1463, 0.2112, 0.2135, 0.08797, 0.04906, 0.01651, 0.03416, 0.01045, 0.01017, ) ,
	}

        self._mcStatError =  	{
		"mcMuonErr"          :   ( 0.2094, 0.4138, 0.3204, 0.3355, 0.2873, 0.2164, 0.1532, 0.1047, 0.08464, 0.04696, 0.05359, ) ,
		"mcMumuErr"          :   ( 0.0345, 0.03653, 0.03002, 0.04264, 0.04178, 0.02723, 0.01517, 0.005104, 0.01977, 0.003726, 0.004738, ) ,
		"mcZinvErr"          :   ( 0.002886, 0.01692, 0.01066, 0.004812, 0.004189, 0.002371, 0.002416, 0.001933, 0.001987, 0.0005727, 0.00022, ) ,
		"mcHadErr"           :   ( 0.06761, 0.2054, 0.136, 0.1141, 0.09189, 0.06385, 0.03164, 0.02003, 0.03247, 0.0196, 0.01275, ) ,
		"mcTtwErr"           :   ( 0.06754, 0.2047, 0.1355, 0.114, 0.0918, 0.0638, 0.03154, 0.01994, 0.03241, 0.01959, 0.01275, ) ,
		"mcPhotErr"          :   ( 0.0, 0.0, 0.0, 0.03403, 0.01628, 0.01431, 0.006524, 0.004131, 0.0006522, 0.006933, 0.0009526, ) ,
	}

        self._observations =  	{
		"nPhot"              :   ( 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ) ,
		"nHad"               :   ( 1.0, 12.0, 1.0, 1.0, 4.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, ) ,
		"nMuon"              :   ( 7.0, 31.0, 19.0, 21.0, 13.0, 3.0, 4.0, 1.0, 1.0, 0.0, 0.0, ) ,
		"nMumu"              :   ( 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ) ,
	}

        common(self)


class data_3b_le3j(data) :
    def _fill(self) :
        self._mcExpectationsBeforeTrigger =  	{
		"mcPhot"             :   ( 0.0, 0.0, 0.0, 0.1097, 0.04529, 0.01317, 0.00413, 0.0009864, 0.02217, 0.0006112, 6.846e-05, ) ,
		"mcTtw"              :   ( 2.539, 3.22, 1.658, 1.31, 0.2715, 0.07843, 0.04761, 0.000235, 0.0002076, 1.985e-05, 1.92e-05, ) ,
		"mcHad"              :   ( 2.694, 3.437, 1.74, 1.372, 0.289, 0.08859, 0.04944, 0.001098, 0.0004321, 6.179e-05, 4.197e-05, ) ,
		"mcMuon"             :   ( 34.47, 18.77, 10.3, 9.37, 2.849, 1.128, 0.3836, 0.1439, 0.08643, 0.02379, 0.03231, ) ,
		"mcZinv"             :   ( 0.1549, 0.2175, 0.0824, 0.06121, 0.01751, 0.01016, 0.001831, 0.0008634, 0.0002245, 4.193e-05, 2.277e-05, ) ,
		"mcMumu"             :   ( 0.5702, 0.3685, 0.2262, 0.2135, 0.08646, 0.01182, 0.009889, 0.0104, 0.0005876, 0.0006416, 0.00119, ) ,
	}

        self._mcStatError =  	{
		"mcMuonErr"          :   ( 0.3717, 0.286, 0.2205, 0.2088, 0.1126, 0.07524, 0.0413, 0.02302, 0.01995, 0.006667, 0.007629, ) ,
		"mcMumuErr"          :   ( 0.05042, 0.03491, 0.04447, 0.04225, 0.02888, 0.001801, 0.004044, 0.005489, 0.0002313, 0.0003456, 0.0008663, ) ,
		"mcZinvErr"          :   ( 0.01778, 0.02383, 0.01029, 0.005682, 0.002465, 0.002631, 0.0002616, 0.0001817, 8.613e-05, 8.834e-06, 7.922e-06, ) ,
		"mcHadErr"           :   ( 0.09608, 0.1065, 0.07922, 0.07441, 0.03491, 0.01582, 0.02121, 0.0001928, 0.0001584, 1.148e-05, 1.152e-05, ) ,
		"mcTtwErr"           :   ( 0.09442, 0.1038, 0.07855, 0.07419, 0.03482, 0.0156, 0.02121, 6.449e-05, 0.000133, 7.327e-06, 8.37e-06, ) ,
		"mcPhotErr"          :   ( 0.0, 0.0, 0.0, 0.01378, 0.008626, 0.003439, 0.001158, 0.0005142, 0.022, 0.0004906, 2.547e-05, ) ,
	}

        self._observations =  	{
		"nPhot"              :   ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ) ,
		"nHad"               :   ( 4.0, 5.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ) ,
		"nMuon"              :   ( 31.0, 15.0, 15.0, 2.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, ) ,
		"nMumu"              :   ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ) ,
	}

        common(self)


class data_ge4b_ge4j(data) :
    def _fill(self) :
        self._mcExpectationsBeforeTrigger =  	{
		"mcPhot"             :   ( 0.0, 0.0, 0.0, 0.002225, 0.001102, 0.001638, 0.0005018, 0.0002416, 2.437e-05, 0.001229, 2.633e-05, ) ,
		"mcTtw"              :   ( 0.02188, 0.244, 0.1194, 0.0731, 0.07553, 0.04176, 0.01791, 0.004322, 0.01164, 0.01014, 0.002535, ) ,
		"mcHad"              :   ( 0.02199, 0.2478, 0.1205, 0.07415, 0.07745, 0.0421, 0.01834, 0.004541, 0.01172, 0.01019, 0.002546, ) ,
		"mcMuon"             :   ( 0.2329, 0.9294, 0.4841, 0.5952, 0.6142, 0.3693, 0.2219, 0.1333, 0.1061, 0.03275, 0.03635, ) ,
		"mcZinv"             :   ( 0.0001092, 0.003806, 0.00107, 0.00105, 0.001919, 0.0003412, 0.0004325, 0.0002186, 7.619e-05, 4.49e-05, 1.126e-05, ) ,
		"mcMumu"             :   ( 0.01361, 0.008274, 0.002531, 0.03127, 0.01503, 0.002999, 0.001035, 0.0003511, 0.0006856, 0.0003077, 0.0002466, ) ,
	}

        self._mcStatError =  	{
		"mcMuonErr"          :   ( 0.02465, 0.0375, 0.02818, 0.03459, 0.04028, 0.02368, 0.02318, 0.01994, 0.01695, 0.008356, 0.00901, ) ,
		"mcMumuErr"          :   ( 0.01218, 0.004043, 0.0006621, 0.01591, 0.01009, 0.001421, 0.0004734, 0.0001576, 0.0004382, 0.0001689, 0.0001368, ) ,
		"mcZinvErr"          :   ( 3.241e-05, 0.001879, 0.0003323, 0.00031, 0.0008145, 5.031e-05, 0.0001052, 9.488e-05, 4.495e-05, 1.951e-05, 6.943e-06, ) ,
		"mcHadErr"           :   ( 0.003356, 0.01686, 0.01646, 0.005748, 0.007322, 0.004554, 0.003717, 0.0009065, 0.0106, 0.006456, 0.001079, ) ,
		"mcTtwErr"           :   ( 0.003356, 0.01676, 0.01646, 0.00574, 0.007276, 0.004553, 0.003715, 0.0009015, 0.0106, 0.006456, 0.001079, ) ,
		"mcPhotErr"          :   ( 0.0, 0.0, 0.0, 0.0006299, 0.0003098, 0.0005746, 0.0001573, 9.686e-05, 7.919e-06, 0.0007951, 1.633e-05, ) ,
	}

        self._observations =  	{
		"nPhot"              :   ( 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ) ,
		"nHad"               :   ( 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, ) ,
		"nMuon"              :   ( 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, ) ,
		"nMumu"              :   ( 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ) ,
	}

        common(self)

