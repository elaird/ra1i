#! /usr/bin/env python

import utils
from data import data,scaled,excl,trig

class data_b_had(data) :
    """all samples have an alphaT cut applied in all bins"""
    
    def _fill(self) :




        isExcl =                         (    1,     1,     0,     0,     0,     0,     0,     1)

        self._htBinLowerEdges =          (275.0, 325.0, 375.0, 475.0, 575.0, 675.0, 775.0, 875.0)
        self._htMaxForPlot = 975.0
        
        self._mergeBins = None
        self._constantMcRatioAfterHere = (    0,     0,     0,     0,     0,     0,     0,     1)
        
        self._lumi = {
            "had":     4650.,
            "mcHad":   4650.,
            "muon":    4650.,
            "mcMuon":  4650.,
            "mumu":    4650.,
            "mcMumu" : 4650.,
            }
        self._htMeans =       ( )
        self._observations = {
            "nHad":           (     784.0,     370.0,     274.0,      91.0,      70.0,      34.0,      14.0,      30.0), 
            "nMuon":          (     472.0,     201.0,     854.0,     456.0,     384.0,     154.0,      99.0,     132.0),
            "nMumu":          (      19.0,      12.0,      43.0,      27.0,      30.0,      18.0,       3.0,      18.0)
            }

        self._mcExpectations = {
            
            "mcMumuZZ":    (22.7621, 11.547633999999999, 38.84205, 17.582320000000003, 19.610359999999996, 7.9292, 3.7233899999999993, 6.6354869999999995), 
            "mcMumuZinv":  (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), 
            "mcTt":        (418.8, 165.3, 141.9, 57.39, 41.21, 23.47, 11.978, 8.904), 
            "mcMumuDY":    (16.41, 11.24, 25.85, 11.73, 15.134, 4.908, 2.3724, 3.939), 
            "mcMuonWZ":    (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), 
            "mcHadWJets":  (161.6, 91.0, 42.2414, 16.54185, 13.894, 4.406, 4.429, 2.7816), 
            "mcMuonWW":    (2.474, 1.268, 2.042, 0.9139, 1.0048, 0.17128, 0.14103000000000002, 0.321), 
            "mcHadZinv":   (191.109, 82.2594, 56.65, 23.94, 13.596, 5.417, 3.7729999999999997, 3.0953999999999997), 
            "mcMuonZinv":  (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), 
            "mcMuonZZ":    (0.0249, 0.01165, 0.02684, 0.03279, 0.0, 0.0, 0.0, 0.0), 
            "mcMuonWJets": (128.6, 48.15, 187.5704, 86.74132399999999, 83.78, 39.14, 31.47, 42.57), 
            "mcHadtt":     (418.8, 165.3, 141.9, 57.39, 41.21, 23.47, 11.978, 8.904), 
            "mcHadWZ":     (2.548, 0.9855, 0.5878, 0.1452, 0.10572, 0.0434, 0.01663, 0.0327), 
            "mcMuont":     (37.495000000000005, 17.7392, 49.422, 25.298, 21.648, 9.902, 7.6632, 7.298400000000001), 
            "mcHadWW":     (3.433, 0.745, 0.6808, 0.3378, 0.13564, 0.07282, 0.0, 0.03513), 
            "mcMuontt":    (379.7, 173.4, 644.8, 343.9, 328.6, 137.98, 90.75, 88.26), 
            "mcHadZZ":     (2.751, 1.007, 0.6232, 0.1678, 0.053559999999999997, 0.01381, 0.004294, 0.019122), 
            "mcMumut":     (0.30479999999999996, 0.047154, 0.5078, 0.32467, 0.348, 0.10534, 0.09690000000000001, 0.20117999999999997), 
            "mcMumuWW":    (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), 
            "mcT":         (33.961999999999996, 13.878499999999999, 9.2675, 3.2643, 2.9026, 0.83579, 1.1047799999999999, 1.186), 
            "mcMumuWJets": (0.0, 0.0, 0.04564, 0.0, 0.0, 0.0, 0.0, 0.0), 
            "mcMumutt":    (5.641, 0.1031, 12.19, 5.322, 4.038, 2.868, 1.2171, 2.4396), 
            "mcMuonDY":    (0.7421, 0.1496, 5.7, 0.6145, 3.414, 1.9424, 0.0, 1.2804), 
            "mcMumuWZ":    (0.1605, 0.04718, 0.09031, 0.08585, 0.03082, 0.0, 0.03699, 0.03699), 
            "mcHadDY":     (1.628, 0.4649, 1.503, 0.4368, 0.0, 0.0, 0.3787, 0.0), 
            "mcHadt":      (33.961999999999996, 13.878499999999999, 9.2675, 3.2643, 2.9026, 0.83579, 1.1047799999999999, 1.186)
            }


        #self._mcExpectations["mcZinv"] = [a+b for a,b in zip(self._mcExpectations["mcZinv01"], self._mcExpectations["mcZinv27"])]

        self._mcStatError = {
            "mcMumuWJetsErr":   (0.0, 0.0, 0.046601367312558546, 0.0, 0.0, 0.0, 0.0, 0.0), 
            "mcHadWWErr":       (0.3397268119967866, 0.1582599624589239, 0.1512873778118981, 0.10656700113402834, 0.06752845485171417, 0.049478697586234015, 0.0, 0.03436623827384953), 
            "mcMumuZZErr":      (2.7588143519610644, 2.1121704689978626, 3.555751422692656, 2.3873730283281884, 2.605682359213339, 1.5842672713472497, 1.0872078898651836, 1.4307105590383735), 
            "mcHadWZErr":       (0.17341016996127995, 0.1078457826122561, 0.08328938262527823, 0.0413959792177936, 0.035322662299719136, 0.022631832323079807, 0.01400944648745981, 0.019644850512284383), 
            "mcMuonZZErr":      (0.010908887340146107, 0.007461802429708254, 0.011325882164317267, 0.012518476876201834, 0.0, 0.0, 0.0, 0.0), 
            "mcHadDYErr":       (0.8017264137222871, 0.4284289060398469, 0.7703329632924973, 0.41527932187384436, 0.0, 0.0, 0.3866754898768475, 0.0), 
            "mcHadtErr":        (1.2061386453836889, 0.7705303882510086, 0.6298548898375324, 0.37380591830848536, 0.35225108930221916, 0.18907212046859265, 0.217645857370879, 0.22506416582921415), 
            "mcHadZZErr":       (0.1146637334557008, 0.06937380550323011, 0.05457509563894506, 0.028318924873660018, 0.015999303147324884, 0.0081241441826201, 0.00453014187195059, 0.009559769920871528), 
            "mcMuonDYErr":      (0.5412902540084201, 0.24303274300390063, 1.5001559873893113, 0.4925609015162491, 1.1609960715825012, 0.8757261665429439, 0.0, 0.7110036407628304), 
            "mcMuontErr":       (1.2664962805537567, 0.8710569279547118, 1.4551406753726597, 1.0407810130466928, 0.9622449152741728, 0.6517334899409422, 0.5734363460688118, 0.5593033308929959), 
            "mcMuonWWErr":      (0.2883983488701002, 0.2064679039027616, 0.2620117639019286, 0.17528399408631126, 0.18379459483673613, 0.07588330698724192, 0.06885709160242684, 0.10388322848997329), 
            "mcHadttErr":       (9.102382840992792, 5.718579828418941, 5.298378246407102, 3.3695342378732405, 2.855308699212749, 2.154806644365104, 1.5393731795896666, 1.3272243377515347), 
            "mcMumuWZErr":      (0.04352235333423504, 0.023596838508791806, 0.0326469619604183, 0.03183061295474845, 0.019071777405108313, 0.0, 0.020893780009969474, 0.020893780009969474), 
            "mcMumuZinvErr":    (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), 
            "mcMuonWJetsErr":   (19.95844875460014, 12.212496287512229, 2.984957014172298, 2.0315944126226904, 1.9966227694033745, 1.3646970480293419, 1.2236978948866424, 1.4232384450435565), 
            "mcHadZinvErr":     (3.5537733689235167, 2.2976717558480804, 1.9024094531672195, 1.2367049846264873, 0.931986488421372, 0.5882791496815096, 0.4909615041426364, 0.4446951852561482), 
            "mcMumuttErr":      (1.0564034505717974, 0.14281739060072482, 1.5529362009432326, 1.026098839274268, 0.8937888211652685, 0.7532538059910483, 0.49069868308158315, 0.6947220344339166), 
            "mcMumuWWErr":      (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), 
            "mcMuonttErr":      (8.667065122981366, 5.857014615996788, 11.294428894990663, 8.24836458954137, 8.062793569725073, 5.224681630147429, 4.237162090951915, 4.178628122578031), 
            "mcMuonWZErr":      (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), 
            "mcMumuDYErr":      (2.5453838389229233, 2.1066003279692143, 3.19469399602685, 2.152028397779639, 2.4444201589804484, 1.3920385706078695, 0.9678163385260655, 1.2470733035210881), 
            "mcMuonZinvErr":    (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), 
            "mcMumutErr":       (0.11410762880105782, 0.04493166931063212, 0.1472872619380237, 0.11772501480921546, 0.12199957465663559, 0.06716675442404522, 0.06427116807714016, 0.09260761643191125), 
            "mcHadWJetsErr":    (22.37314190363079, 16.789083734677124, 1.409053851760074, 0.8858128522959717, 0.8130916268109025, 0.4578762189828163, 0.4590697556635593, 0.36380878367076297)
        }


        #self._mcStatError["mcZinvErr"] = self._mcStatError["mcZinvErrDB"]
        #self._mcStatError["mcHadErr"] = tuple([utils.quadSum([ttwErr, zinvErr]) for ttwErr,zinvErr in zip(self._mcStatError["mcTtwErr"], self._mcStatError["mcZinvErr"])])

        print "the mumu purities are old"
        self._purities = {
            }

        self._mcExtra = {}
        #self._mcExtra["mcHad"]  = tuple([(ttw+zinv if ttw!=None and zinv!=None else None) for ttw,zinv in zip(self._mcExpectations["mcTtw"], self._mcExpectations["mcZinv"])])
        #self._mcExtra["mcPhot"] = tuple([(gJet/purity if (gJet and purity) else None) for gJet,purity in zip(self._mcExpectations["mcGjets"], self._purities["phot"])])
        #self._mcExtra["mcMumu"] = tuple([(zMumu/purity if (zMumu and purity) else None) for zMumu,purity in zip(self._mcExpectations["mcZmumu"], self._purities["mumu"])])
        
        self._fixedParameters = {
            "sigmaLumiLike": utils.quadSum({"lumi": 0.06, "deadEcal": 0.03, "lepVetoes": 0.025, "jesjer": 0.025, "pdf": 0.10}.values()),
            "sigmaPhotZ": 0.40,
            "sigmaMuonW": 0.30,
            "sigmaMumuZ": 0.20,

            "k_qcd_nom"     : 2.89e-2,
            "k_qcd_unc_inp" : 0.76e-2,

            #"k_qcd_nom"     : 3.30e-2,
            #"k_qcd_unc_inp" : 0.66e-2,

            #"k_qcd_nom"     : 2.89e-2,
            #"k_qcd_unc_inp" : 0.01e-2,
            }

